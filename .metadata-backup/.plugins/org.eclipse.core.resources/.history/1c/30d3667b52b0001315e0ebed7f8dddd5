public class SimpleOperations {

	public static void main(String[] args) {
		BNode root = new BNode(10);
		BNode n1 = new BNode(9);
		BNode n2 = new BNode(8);
		root.left = n1;
		root.right = n2;
		BNode n3 = new BNode(7);
		BNode n4 = new BNode(6);
		n1.left = n3;
		n1.right = n4;
		BNode n5 = new BNode(5);
		BNode n6 = new BNode(4);
		n3.left = n5;
		n4.right = n6;
		printPostorder(root);
		printInorder(root);
		printPreorder(root);

	}

	public static void printPostorder(BNode node) {
		if (node == null)
			return;

		printPostorder(node.left);

		printPostorder(node.right);

		System.out.format("%d ", node.data);
	}

	public static void printInorder(BNode node) {
		if (node == null)
			return;

		printInorder(node.left);

		System.out.format("%d ", node.data);

		printInorder(node.right);
	}

	public static void printPreorder(BNode node) {
		if (node == null)
			return;

		System.out.format("%d ", node.data);

		printPreorder(node.left);

		printPreorder(node.right);

	}
	public static int size(Node node) 
	{  
	  if (node==null) 
	    return 0;
	  else    
	    return(size(node.left) + 1 + size(node.right));  
	}

}

class BNode {
	int data;
	BNode left;
	BNode right;

	public BNode(int data) {
		super();
		this.data = data;
		this.left = null;
		this.right = null;
	}

}
