
public class MergeOverlappingIntervals {

	public static void main(String[] args) {

	}
	
	// Compares two intervals according to their staring time.
	// This is needed for sorting the intervals using library
	// function std::sort(). See http://goo.gl/iGspV
	bool compareInterval(Interval i1, Interval i2)
	{  return (i1.start < i2.start)? true: false; }
	 
	// The main function that takes a set of intervals, merges
	// overlapping intervals and prints the result
	void mergeIntervals(vector<Interval>& intervals)
	{
	    // Test if the given set has at least one interval
	    if (intervals.size() <= 0)
	        return;
	 
	    // Create an empty stack of intervals
	    stack<Interval> s;
	 
	    // sort the intervals based on start time
	    sort(intervals.begin(), intervals.end(), compareInterval);
	 
	    // push the first interval to stack
	    s.push(intervals[0]);
	 
	    // Start from the next interval and merge if necessary
	    for (int i = 1 ; i < intervals.size(); i++)
	    {
	        // get interval from stack top
	        Interval top = s.top();
	 
	        // if current interval is not overlapping with stack top,
	        // push it to the stack
	        if (top.end < intervals[i].start)
	        {
	            s.push( intervals[i] );
	        }
	        // Otherwise update the ending time of top if ending of current 
	        // interval is more
	        else if (top.end < intervals[i].end)
	        {
	            top.end = intervals[i].end;
	            s.pop();
	            s.push(top);
	        }
	    }
	 
	    // Print contents of stack
	    cout << "\n The Merged Intervals are: ";
	    while (!s.empty())
	    {
	        Interval t = s.top();
	        cout << "[" << t.start << "," << t.end << "]" << " ";
	        s.pop();
	    }
	 
	    return;
	}

}

class Interval
{
    int start;
    int end;
};
