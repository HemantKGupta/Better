import java.util.LinkedList;
import java.util.Queue;

public class PrintLevelOrderTraversal {

	public static void main(String[] args) {
		BNode root = new BNode(10);
		root.left = new BNode(9);
		root.right = new BNode(8);
		root.left.left = new BNode(7);
		root.left.right = new BNode(6);
		root.left.left.left = new BNode(5);
		root.left.right.right = new BNode(4);
		printLevelOrder(root);
	}

	/* Function to print level order traversal a tree */
	public static void printLevelOrder(BNode root) {
		int h = height(root);
		for (int i = 1; i <= h; i++)
			printGivenLevel(root, i);
	}

	/* Print BNodes at a given level */
	public static void printGivenLevel(BNode root, int level) {
		if (root == null)
			return;
		if (level == 1)
			System.out.format("%d ", root.data);
		else if (level > 1) {
			printGivenLevel(root.left, level - 1);
			printGivenLevel(root.right, level - 1);
		}
	}

	/*
	 * Given a binary tree, print its BNodes in level order using queue
	 */
	public static void printLevelOrderUsingQ(BNode root) {
		Queue<BNode> queue = new LinkedList<BNode>();
		BNode temp_BNode = root;

		while (temp_BNode != null) {
			System.out.format("%d ", temp_BNode.data);

			if (temp_BNode.left != null)
				queue.add(temp_BNode.left);

			if (temp_BNode.right != null)
				queue.add(temp_BNode.right);

			temp_BNode = queue.poll();
		}
	}
	
	/* Function to calculate height of a tree */
	public static int height(BNode root) {

		if (root == null) {
			return 0;
		}
		int lheight = height(root.left);
		int rheight = height(root.right);
		if (lheight > rheight) {
			return lheight + 1;
		} else
			return rheight + 1;
	}

}
