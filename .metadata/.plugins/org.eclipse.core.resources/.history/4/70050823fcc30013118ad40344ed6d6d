
public class BoundryTraversal {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}
	
	void printLeaves(BNode root)
	{
	    if ( root != null )
	    {
	        printLeaves(root.left);
	        if ( root.left == null   &&  root.right == null )
	           System.out.printf("%d ", root.data);
	        printLeaves(root.right);
	    }
	}
	 
	void printBoundaryLeft(BNode root)
	{
	    if (root!= null)
	    {
	        if (root.left!=null)
	        {
	            // to ensure top down order, print the node
	            // before calling itself for left subtree
	            System.out.printf("%d ", root.data);
	            printBoundaryLeft(root.left);
	        }
	        else if( root.right !=null )
	        {
	           System.out.printf("%d ", root.data);
	            printBoundaryLeft(root.right);
	        }
	       
	    }
	}
	 
	void printBoundaryRight(BNode root)
	{
	    if (root!=null)
	    {
	        if ( root.right != null )
	        {
	            // to ensure bottom up order, first call for right
	            //  subtree, then print this node
	            printBoundaryRight(root.right);
	           System.out.printf("%d ", root.data);
	        }
	        else if ( root.left != null)
	        {
	            printBoundaryRight(root.left);
	           System.out.printf("%d ", root.data);
	        }
	       // do nothing if it is a leaf node, this way we avoid
	       // duplicates in output
	    }
	}
	 
	 
	// A function to do boundary traversal of a given binary tree
	void printBoundary (BNode root)
	{
	    if (root)
	    {
	       System.out.printf("%d ",root.data);
	 
	        // Print the left boundary in top-down manner.
	        printBoundaryLeft(root.left);
	 
	        // Print all leaf nodes
	        printLeaves(root.left);
	        printLeaves(root.right);
	 
	        // Print the right boundary in bottom-up manner
	        printBoundaryRight(root.right);
	    }
	}

}
