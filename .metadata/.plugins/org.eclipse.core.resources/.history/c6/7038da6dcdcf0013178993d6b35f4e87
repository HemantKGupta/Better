import java.util.LinkedList;
import java.util.Queue;


public class CompleteBinaryTreeByLL {

	public static void main(String[] args) {

	}
	
	// Function to insert a new node in complete binary tree
	public static void insert(BNode root, int data)
	{
	    
		Queue<BNode> queue = new LinkedList<BNode>();
		// Create a new node for given data
	    BNode temp = new BNode(data);
	 
	    // If the tree is empty, initialize the root with new node.
	    if (!*root)
	        *root = temp;
	 
	    else
	    {
	        // get the front node of the queue.
	        struct node* front = getFront(queue);
	 
	        // If the left child of this front node doesn’t exist, set the
	        // left child as the new node
	        if (!front->left)
	            front->left = temp;
	 
	        // If the right child of this front node doesn’t exist, set the
	        // right child as the new node
	        else if (!front->right)
	            front->right = temp;
	 
	        // If the front node has both the left child and right child,
	        // Dequeue() it.
	        if (hasBothChild(front))
	            Dequeue(queue);
	    }
	 
	    // Enqueue() the new node for later insertions
	    Enqueue(temp, queue);
	}

}
