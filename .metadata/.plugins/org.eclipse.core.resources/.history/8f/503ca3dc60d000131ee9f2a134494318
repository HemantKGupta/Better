import java.util.Arrays;
import java.util.List;

public class BinaryToBST {

	public static void main(String[] args) {

	}
	
	// This function converts a given Binary Tree to BST
	public static void binaryTreeToBST (BNode root)
	{
	    if(root == null)
	       return;
	 
	    /* Count the number of nodes in Binary Tree so that
	       we know the size of temporary array to be created */
	    int n = countNodes (root);
	 
	    // Create a temp array arr[] and store inorder traversal of tree in arr[]
	    int[] arr = new int[n];
	    int i = 0;
	    storeInorder (root, arr);
	 
	    Arrays.sort(arr);
	 
	    // Copy array elements back to Binary Tree
	    i = 0;
	    arrayToBST (arr, root, &i);
	 
	  
	}
	
	/* A helper function to count nodes in a Binary Tree */
	public static int countNodes (BNode root)
	{
	    if (root == null)
	     return 0;
	    return countNodes (root.left) +
	           countNodes (root.right) + 1;
	}
	 
	public static int index;

	public static void storeInorder(BNode node, int[] in) {
		if (node == null)
			return;
		storeInorder(node.left, in);
		in[index]= node.data;
		index++;
		storeInorder(node.right, in);
	}

}
