import java.util.Arrays;
import java.util.Map.Entry;
import java.util.NavigableMap;
import java.util.SortedMap;
import java.util.TreeMap;

public class Solution {

	public static void main(String[] args) {
		int[] A = { 5, 3, 6, 3, 4, 2 };
		System.out.println(solution(A));
	}

	public static int solution(int[] A) {
		if (A.length == 0 || A.length == 1) {
			return 0;
		}
		NavigableMap<Integer, Integer> map = new TreeMap<Integer, Integer>();
		int[] dist = new int[A.length];
		SortedMap<Integer, Integer> lower = null;
		map.put(A[0], 0);
		
		for (int i = 1; i < A.length; i++) {
			int value = A[i];
			lower = map.headMap(value);
			System.out.println("For i : "+ i);
			System.out.println("lower: "+ lower);
			map.put(A[i], i);
			for (Entry<Integer, Integer> e : lower.entrySet()) {
				int index = e.getValue();
				dist[index] = i - index;
			}
			lower = null;
		}
		System.out.println(Arrays.toString(dist));
		int max = 0;
		for (int i = 0; i < dist.length; i++) {
			if (max < dist[i]) {
				max = dist[i];
			}
		}
		return max;
	}
}

class BNode {
	Data data;
	BNode left;
	BNode right;

	public BNode(Data data) {
		super();
		this.data = data;
		this.left = null;
		this.right = null;
	}
	
	public static BNode insert(BNode node, Data data) { 
		  if (node == null) { 
		    return(new BNode(data)); 
		  } 
		  else { 
		    if (data.value <= node.data.value) 
		    	node.left = insert(node.left, data); 
		    else 
		    	node.right = insert(node.right, data);

		    return node;
		  } 
		} 

}

class Data {
	public int value;
	public int index;
}
