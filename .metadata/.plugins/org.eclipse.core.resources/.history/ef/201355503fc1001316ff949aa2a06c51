import java.util.Arrays;
import java.util.Collections;
import java.util.Map.Entry;
import java.util.NavigableMap;
import java.util.SortedMap;
import java.util.TreeMap;


public class Solution {
     public static void main(String[] args) {
    	 int[] A = {2,4,6,3,4,2};
		System.out.println(solution(A));
	}
	
	public static int solution(int[] A) {
        
         NavigableMap<Integer, Integer> map = new TreeMap<Integer, Integer>();
         int[] dist =new int[A.length]; 
         SortedMap<Integer, Integer>lower = null;
         map.put(A[0], 0);
         
        for (int i = 1; i< A.length; i++){
            int value = A[i];
            lower = map.headMap(value);
            map.put(A[i], i);
            System.out.println(lower);
            for(Entry<Integer, Integer> e: lower.entrySet()){
            	int index = e.getValue();
            	System.out.println("To update dist i is: "+ i);
            	System.out.println("To update dist index is: "+ index);
            	dist[index] = i-index; 
            }
            lower=null;            
        }
        System.out.println(Arrays.toString(dist));
        int max = 0;
        for (int i = 0; i < dist.length; i++) {
			if(max < dist[i]){
				max = dist[i];
			}
		}
        
        
        return max;
    }
}


//you can also use imports, for example:
//import java.math.*;
class Solution {
 public int solution(int[] A) {
     NavigableMap<Integer, Integer> map = new TreeMap<Integer, Integer>();
      int[] dist =new int[A.length]; 
      SortedMap<Integer, Integer>lower = null;
      map.put(A[0], 0);
     for (int = 1; i< A.length; i++){
        int value = A[i];
        lower = map.headMap(value);
         map.put(A[i], i);
         for(Entry<Integer, Integer> e: lower.entrySet()){
         	int index = e.getValue();
         	dist[index] = i-index; 
         }
         lower=null;
     }
     int max = 0;
     for (int i = 0; i < dist.length; i++) {
			if(max < dist[i]){
				max = dist[i];
			}
		}
		return max;
 }
}

