public class TrieTest {

	public static void main(String[] args) {
		TrieNode root = new TrieNode();

		insert(root, "TEST");
		insert(root, "TATTER");
		System.out.println(has(root, "TESTW"));
		System.out.println(has(root, "TEST"));
		delete(root, "TEST");
		System.out.println(has(root, "TEST"));
		System.out.println(toString(root));
	}

	public static void insert(TrieNode root, String word) {
		int val = word.charAt(0) - 64;
		if (root.c[val] == null) {
			root.c[val] = new TrieNode();
		}
		if (word.length() > 1) {
			insert(root.c[val], word.substring(1));
		} else {
			root.c[val].flag = true;
		}
	}

	public static boolean has(TrieNode root, String word) {
		int val = word.charAt(0) - 64;
		if (root.c[val] != null && word.length() > 1) {
			return has(root.c[val], word.substring(1));
		} else if (root.c[val] == null) {
			return false;
		} else if (root.c[val].flag == true && word.length() == 1) {
			return true;
		}
		return false;
	}

	public static void delete(TrieNode root, String word) {
		int val = word.charAt(0) - 64;
		if (root.c[val] != null && word.length() > 1) {
			delete(root.c[val], word.substring(1));
		} else if (root.c[val] == null) {
			return;
		} else if (root.c[val].flag == true && word.length() == 1) {
			root.c[val].flag = false;
		}
	}

	public static String toString(TrieNode root) {
		StringBuilder sb = new StringBuilder();
		toString(sb, root, 0);
		return sb.toString();
	}

	private static void toString(StringBuilder sb, TrieNode root, int depth) {
		sb.append(" {");
		++depth;

		for (int i = 0; i < root.c.length; ++i) {
			if (root.c[i] == null) {
				continue;
			}
			sb.append('\n');
			for (int j = depth; --j >= 0;) {
				sb.append("  ");
			}
			sb.append('\'').append().append("':");
			toString(sb, root.c[i], depth);
		}
		sb.append("}");
	}
}

class TrieNode {
	public TrieNode[] c;
	public boolean flag = false;

	public TrieNode() {
		c = new TrieNode[26];
	}
}
