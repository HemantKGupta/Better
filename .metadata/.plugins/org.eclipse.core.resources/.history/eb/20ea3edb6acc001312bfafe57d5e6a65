import java.util.Arrays;


public class SmallestPositive {

	public static void main(String[] args) {
		int arr[] = {0, 10, 2, -10, -20};
		System.out.println(findMissing(arr, arr.length));
		
	}
	/* Utility function that puts all non-positive (0 and negative) numbers on left 
	  side of arr[] and return count of such numbers */
	public static int segregate (int arr[], int size)
	{
	    int j = 0, i;
	    for(i = 0; i < size; i++)
	    {
	       if (arr[i] <= 0)  
	       {
	           swap(arr, i, j);
	           j++;  // increment count of non-positive integers
	       }
	    }
	 
	    return j;
	}
	 
	/* Find the smallest positive missing number in an array that contains
	  all positive integers */
	public static int findMissingPositive(int arr[], int size)
	{
	  int i;
	 
	  // Mark arr[i] as visited by making arr[arr[i] - 1] negative. Note that 
	  // 1 is subtracted because index start from 0 and positive numbers start from 1
	  for(i = 0; i < size; i++)
	  {
	    if(Math.abs(arr[i]) - 1 < size && arr[Math.abs(arr[i]) - 1] > 0)
	      arr[Math.abs(arr[i]) - 1] = -arr[Math.abs(arr[i]) - 1];
	  }
	 
	  // Return the first index value at which is positive
	  for(i = 0; i < size; i++)
	    if (arr[i] > 0)
	      return i+1;  // 1 is added becuase indexes start from 0
	 
	  return size+1;
	}
	 
	/* Find the smallest positive missing number in an array that contains
	  both positive and negative integers */
	public static int findMissing(int arr[], int size)
	{
	   // First separate positive and negative numbers
	   int shift = segregate (arr, size);
	 
	   // Shift the array and call findMissingPositive for
	   // positive part
	   return findMissingPositive(Arrays.copyOfRange(arr, shift, size-1), size-shift);
	}
	public static void swap(int[] arr, int i, int j) {
		int temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}

}
