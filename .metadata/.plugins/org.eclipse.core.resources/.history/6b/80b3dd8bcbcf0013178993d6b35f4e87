import java.util.Deque;
import java.util.LinkedList;


public class PostorderIterative1Stack {

	public static void main(String[] args) {

	}
	
	// An iterative function to do postorder traversal 
	public static void postOrderIterative(BNode root)
	{
	    // Check for empty tree
	    if (root == null)
	        return;
	     
	    Deque<BNode> stack = new LinkedList<BNode>();
	    do
	    {
	        // Move to leftmost node
	        while (root!=null)
	        {
	            // Push root's right child and then root to stack.
	            if (root.right!=null)
	                stack.push(root.right);
	            stack.push(root);
	            root = root.left;
	        }
	 
	        // Pop an item from stack and set it as root    
	        root = stack.pop();
	 
	        // If the popped item has a right child and the right child is not
	        // processed yet, then make sure right child is processed before root
	        if (root.right!= null && stack.peek() == root.right)
	        {
	            stack.pop();  // remove right child from stack
	            stack.push(root);  // push root back to stack
	            root = root.right; // change root so that the right 
	                                // child is processed next
	        }
	        else  // Else print root's data and set root as NULL
	        {
	            System.out.printf("%d ", root.data);
	            root = null;
	        }
	    } while (!stack.isEmpty());
	}

}
