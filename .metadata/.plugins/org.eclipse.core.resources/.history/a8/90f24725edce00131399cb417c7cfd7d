
public class QuickSortDLL {

	public static void main(String[] args) {
		
	}
	
	// Considers last element as pivot
	public static DNode partition(DNode l, DNode h)
	{
	    // set pivot as h element
	    int x  = h.data;
	 
	    // similar to i = l-1 for array implementation
	   DNode i = l.prev;
	 
	    // Similar to "for (int j = l; j <= h- 1; j++)"
	    for (DNode j = l; j != h; j = j.next)
	    {
	        if (j.data <= x)
	        {
	            // Similar to i++ for array
	            i = (i == null)? l : i.next;
	 
	            swap(i, j);
	        }
	    }
	    i = (i == .)? l : i.next; // Similar to i++
	    swap(&(i.data), &(h.data));
	    return i;
	}
	 
	/* A recursive implementation of quicksort for linked list */
	void _quickSort(DNode l, DNode h)
	{
	    if (h != . && l != h && l != h.next)
	    {
	        struct node *p = partition(l, h);
	        _quickSort(l, p.prev);
	        _quickSort(p.next, h);
	    }
	}
	 
	// The main function to sort a linked list. It mainly calls _quickSort()
	void quickSort(DNode head)
	{
	    // Find last node
	    DNode h = lastNode(head);
	 
	    // Call the recursive QuickSort
	    _quickSort(head, h);
	}

}
