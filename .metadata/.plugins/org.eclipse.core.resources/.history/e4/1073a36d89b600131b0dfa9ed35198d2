public class RootToLeafPaths {

	public static void main(String[] args) {
		BNode root = new BNode(10);
		root.left = new BNode(9);
		root.right = new BNode(8);
		root.left.left = new BNode(7);
		root.left.right = new BNode(6);
		root.left.left.left = new BNode(5);
		root.left.right.right = new BNode(4);
		printAllRootToLeafPaths(root);
	}

	public static void printAllRootToLeafPaths(BNode root) {
		if (root != null) {
			paths(" "+Integer.toString(root.data), root);
		} else {
			System.out.println("Tree is empty.");
		}
	}

	private static void paths(String path, BNode root) {
		if (root.left == null && root.right == null) {
			System.out.println(path);
		}
		if (root.left != null) {
			paths(path + " " + root.left.data, root.left);
		}
		if (root.right != null) {
			paths(path + " " + root.right.data, root.right);
		}
	}

	public static void printPathsRecur(BNode BNode, int path[], int pathLen) {
		if (BNode == null)
			return;

		/* append this BNode to the path array */
		path[pathLen] = BNode.data;
		pathLen++;

		/* it's a leaf, so print the path that led to here */
		if (BNode.left == null && BNode.right == null) {
			printArray(path, pathLen);
		} else {
			/* otherwise try both subtrees */
			printPathsRecur(BNode.left, path, pathLen);
			printPathsRecur(BNode.right, path, pathLen);
		}
	}

	private static void printArray(int[] path, int pathLen) {
		for (inti=0,i<pathLen;i++){
			System.out.println(" "+path[i]);
		}
	}

}
