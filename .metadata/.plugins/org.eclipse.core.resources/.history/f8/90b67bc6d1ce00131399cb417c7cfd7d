
public class SortedLinkedListToBST {

	public static void main(String[] args) {

	}
	
	/* This function counts the number of nodes in Linked List and then calls
	   sortedListToBSTRecur() to construct BST */
	struct TNode* sortedListToBST(struct LNode *head)
	{
	    /*Count the number of nodes in Linked List */
	    int n = countLNodes(head);
	 
	    /* Construct BST */
	    return sortedListToBSTRecur(&head, n);
	}
	 
	/* The main function that constructs balanced BST and returns root of it.
	       head_ref -->  Pointer to pointer to head node of linked list
	       n  --> No. of nodes in Linked List */
	struct TNode* sortedListToBSTRecur(struct LNode **head_ref, int n)
	{
	    /* Base Case */
	    if (n <= 0)
	        return NULL;
	 
	    /* Recursively construct the left subtree */
	    struct TNode *left = sortedListToBSTRecur(head_ref, n/2);
	 
	    /* Allocate memory for root, and link the above constructed left 
	       subtree with root */
	    struct TNode *root = newNode((*head_ref)->data);
	    root->left = left;
	 
	    /* Change head pointer of Linked List for parent recursive calls */
	    *head_ref = (*head_ref)->next;
	 
	    /* Recursively construct the right subtree and link it with root 
	      The number of nodes in right subtree  is total nodes - nodes in 
	      left subtree - 1 (for root) which is n-n/2-1*/
	    root->right = sortedListToBSTRecur(head_ref, n-n/2-1);
	 
	    return root;
	}

}
