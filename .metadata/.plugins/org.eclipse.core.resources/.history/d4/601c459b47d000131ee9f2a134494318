
public class LeastCommonAncestorBinaryTree {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}
	
	// This function returns pointer to LCA of two given values n1 and n2.
	// This function assumes that n1 and n2 are present in Binary Tree
	public static BNode findLCA(BNode root, int n1, int n2)
	{
	    // Base case
	    if (root == null) return null;
	 
	    // If either n1 or n2 matches with root's key, report
	    // the presence by returning root (Note that if a key is
	    // ancestor of other, then the ancestor key becomes LCA
	    if (root.data == n1 || root.data == n2)
	        return root;
	 
	    // Look for keys in left and right subtrees
	    BNode left_lca  = findLCA(root.left, n1, n2);
	    BNode right_lca = findLCA(root.right, n1, n2);
	 
	    // If both of the above calls return Non-NULL, then one key
	    // is present in once subtree and other is present in other,
	    // So this node is the LCA
	    if (left_lca != null && right_lca!= null)  return root;
	 
	    // Otherwise check if left subtree or right subtree is LCA
	    return (left_lca != null)? left_lca: right_lca;
	}

}
