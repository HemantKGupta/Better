
public class KDistFromLeaf {

	public static void main(String[] args) {
		BNode root = new BNode(1);

		root.left = new BNode(2);
		root.right = new BNode(3);

		root.left.left = new BNode(4);
		root.left.right = new BNode(5);

		root.right.left = new BNode(6);
		root.right.right = new BNode(7);

		root.right.left.left = new BNode(8);
		root.right.left.right = new BNode(9);

		root.right.right.left = new BNode(10);
		root.right.right.right = new BNode(11);

	}
	
	/* This function prints all nodes that are distance k from a leaf node
	   path[] -. Store ancestors of a node
	   visited[] -. Stores true if a node is printed as output.  A node may be k
	                 distance away from many leaves, we want to print it once */
	public static void kDistantFromLeafUtil(BNode node, int path[], boolean visited[],
	                          int pathLen, int k)
	{
	    // Base case
	    if (node==null) return;
	 
	    /* append this Node to the path array */
	    path[pathLen] = node.data;
	    visited[pathLen] = false;
	    pathLen++;
	 
	    /* it's a leaf, so print the ancestor at distance k only
	       if the ancestor is not already printed  */
	    if (node.left == null && node.right == null &&
	        pathLen-k-1 >= 0 && visited[pathLen-k-1] == false)
	    {
	        System.out.println(path[pathLen-k-1]+" ");
	        visited[pathLen-k-1] = true;
	        return;
	    }
	 
	    /* If not leaf node, recur for left and right subtrees */
	    kDistantFromLeafUtil(node.left, path, visited, pathLen, k);
	    kDistantFromLeafUtil(node.right, path, visited, pathLen, k);
	}

}
