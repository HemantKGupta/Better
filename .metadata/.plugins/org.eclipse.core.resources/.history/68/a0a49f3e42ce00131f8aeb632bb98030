package largest.independent.set;

public class LargestIndependentSet {

	public static void main(String[] args) {
		BNode root = new BNode(10);
		root.left =  new BNode(20);
		root.right =  new BNode(30);
		root.left.left =  new BNode(40);
		root.left.right =  new BNode(50);
		root.left.right.left =  new BNode(70);
		root.left.right.right =  new BNode(80);
		root.right.right =  new BNode(60);
		System.out.println(LISS(root));
		
	}
	
	// The function returns size of the largest independent set in a given 
	// binary tree
	public static int LISS(BNode root)
	{
	    if (root == null)
	       return 0;
	 
	    // Caculate size excluding the current node
	    int size_excl = LISS(root.left) + LISS(root.right);
	 
	    // Calculate size including the current node
	    int size_incl = 1;
	    if (root.left != null)
	       size_incl += LISS(root.left.left) + LISS(root.left.right);
	    if (root.right != null )
	       size_incl += LISS(root.right.left) + LISS(root.right.right);
	 
	    // Return the maximum of two sizes
	    return Math.max(size_incl, size_excl);
	}

}
