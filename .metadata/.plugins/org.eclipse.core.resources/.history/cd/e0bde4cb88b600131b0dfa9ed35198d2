
public class RootToLeafPaths {

	public static void main(String[] args) {

	}
	
	public static void printAllRootToLeafPaths(BNode root){
		if (root != null){
		paths(Integer.toString(root.data), root);
		}else{
			System.out.println("Tree is empty.");
		}
	}
	private static void paths(String path, BNode root){
		if (root.left == null && root.right == null){
			System.out.println(path);
		}
		if (root.left != null){
			paths(path+root.left.data,root.left);
		}
		if(root.right != null){
			paths(path+root.right.data,root.right);
		}
	}	

public static void printPathsRecur(BNode BNode, int path[], int pathLen) 
	{
	  if (BNode==null) return;
	 
	  /* append this BNode to the path array */
	  path[pathLen] = BNode.data;
	  pathLen++;
	 
	  /* it's a leaf, so print the path that led to here */
	  if (BNode.left==null && BNode.right==null) 
	  {
	    printArray(path, pathLen);
	  }
	  else
	  {
	  /* otherwise try both subtrees */
	    printPathsRecur(BNode.left, path, pathLen);
	    printPathsRecur(BNode.right, path, pathLen);
	  }
	}

}
