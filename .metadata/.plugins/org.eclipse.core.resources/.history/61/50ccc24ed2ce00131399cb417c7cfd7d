
public class SortedLinkedListToBST {

	public static void main(String[] args) {

	}
	
	
	public static BNode sortedListToBST(Node head)
	{
	    /*Count the number of nodes in Linked List */
	    int n = countLNodes(head);
	 
	    /* Construct BST */
	    return sortedListToBSTRecur(head, n);
	}
	 
	
	public static BNode sortedListToBSTRecur(Node head_ref, int n)
	{
	    /* Base Case */
	    if (n <= 0)
	        return null;
	 
	    /* Recursively construct the left subtree */
	    BNode left = sortedListToBSTRecur(head_ref, n/2);
	 
	    
	    BNode root = new BNode((head_ref).data);
	    root.left = left;
	 
	    /* Change head pointer of Linked List for parent recursive calls */
	    head_ref = (head_ref).next;
	 
	    //  The number of nodes in right subtree  is total nodes - nodes in 
	    //  left subtree - 1 (for root) which is n-n/2-1*/
	    root.right = sortedListToBSTRecur(head_ref, n-n/2-1);
	 
	    return root;
	}
	public static int countLNodes(Node head)
	{
	    int count = 0;
	    Node temp = head;
	    while(temp!=null)
	    {
	        temp = temp.next;
	        count++;
	    }
	    return count;
	}

}
