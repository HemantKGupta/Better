import java.util.Deque;
import java.util.LinkedList;


public class KthSmallestBST {

	public static void main(String[] args) {

	}
	
	public BNode k_smallest_element_inorder( BNode root, int k)
	{
	    Deque<BNode> st = new LinkedList<BNode>();
	    BNode pCrawl = root;
	 
	    /* move to left extremen (minimum) */
	    while( pCrawl!=null )
	    {
	        st.push(pCrawl);
	        pCrawl = pCrawl.left;
	    }
	 
	    /* pop off stack and process each node */
	    while( ( pCrawl= st.pop() ) != null  )
	    {
	        /* each pop operation emits one element
	           in the order
	        */
	    	--k;
	        if( k == 0 )
	        {
	            break;
	        }
	 
	        /* there is right subtree */
	        if( pCrawl.right!= null )
	        {
	            /* push the left subtree of right subtree */
	            pCrawl = pCrawl.right;
	            while( pCrawl!=null )
	            {
	                st.push(pCrawl);
	                pCrawl = pCrawl.left;
	            }
	 
	            /* pop off stack and repeat */
	        }
	    }
	 
	    /* node having k-th element or NULL node */
	    return pCrawl;
	}

}
