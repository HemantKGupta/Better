public class PrintLevelOrderTraversal {

	public static void main(String[] args) {

	}

	/* Function to print level order traversal a tree */
	public static void printLevelOrder(Node root) {
		int h = height(root);
		for (int i = 1; i <= h; i++)
			printGivenLevel(root, i);
	}

	/* Print nodes at a given level */
	public static void printGivenLevel(Node root, int level) {
		if (root == null)
			return;
		if (level == 1)
			System.out.format("%d ", root.data);
		else if (level > 1) {
			printGivenLevel(root.left, level - 1);
			printGivenLevel(root.right, level - 1);
		}
	}

	/*
	 * Given a binary tree, print its nodes in level order using queue
	 */
	public static void printLevelOrder(Node root) {
		Queue<Node> queue = new LinkedList<Node>();
		Node temp_node = root;

		while (temp_node != null) {
			System.out.format("%d ", temp_node.data);

			/* Enqueue left child */
			if (temp_node.left != null)
				queue.add(temp_node.left);

			/* Enqueue right child */
			if (temp_node.right != null)
				queue.add(temp_node.right);

			/* Dequeue node and make it temp_node */
			temp_node = queue.poll();
		}
	}

}
