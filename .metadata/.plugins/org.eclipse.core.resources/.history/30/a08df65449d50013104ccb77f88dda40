import java.util.LinkedList;
import java.util.Queue;


public class SingleSourcePathsBFSUndirected {

	public static void main(String[] args) {
		marked = new boolean[G.V()];

	}
	
	private static final int INFINITY = Integer.MAX_VALUE;
	private static boolean[] marked; // marked[v] = is there an s-v path
	private static int[] edgeTo; // edgeTo[v] = previous edge on shortest s-v path

	// BFS from single soruce
	private static void bfs(Graph G, int s) {
			Queue<Integer> q = new LinkedList<Integer>();
			marked[s] = true;
			q.offer(s);

			while (!q.isEmpty()) {
				int v = q.poll();
				for (int w : G.adj(v)) {
					if (!marked[w]) {
						edgeTo[w] = v;
						marked[w] = true;
						q.offer(w);
					}
				}
			}
		}

}
