import java.util.Deque;
import java.util.LinkedList;


public class PostorderIterative2Stack {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}
	
	// An iterative function to do post order traversal of a given binary tree
	public static void postOrderIterative(BNode root)
	{
	    // Create two stacks
		Deque<BNode> s1 = new LinkedList<BNode>();
		Deque<BNode> s2 = new LinkedList<BNode>();
	 
	    // push root to first stack
	    s1.push(root);
	    struct Node* node;
	 
	    // Run while first stack is not empty
	    while (!isEmpty(s1))
	    {
	        // Pop an item from s1 and push it to s2
	        node = pop(s1);
	        push(s2, node);
	 
	        // Push left and right children of removed item to s1
	        if (node->left)
	            push(s1, node->left);
	        if (node->right)
	            push(s1, node->right);
	    }
	 
	    // Print all elements of second stack
	    while (!isEmpty(s2))
	    {
	        node = pop(s2);
	        printf("%d ", node->data);
	    }
	}

}
